/**
 * payment.js - 支付页面交互逻辑
 * 包含API结算和区块链结算的功能
 */

// 全局变量
let paymentData = null;
let paypalOrderCreated = false;
let paypalPopupWindow = null;  // 存储PayPal弹出窗口引用
let paypalPopupCheckInterval = null; // 用于检查PayPal窗口是否关闭的定时器
let paymentCancelled = false;

// 添加全局事件监听器，监听PayPal窗口关闭
window.addEventListener('message', function(event) {
    // 检查消息来源和数据
    if (event.data === 'paypal_window_closed' || 
        (event.data && event.data.type === 'paypal_window_closed') ||
        (event.data && event.data.action === 'cancel')) {
        
        console.log('检测到PayPal窗口关闭事件消息:', event.data);
        handlePayPalWindowClosed();
    }
});

// 处理PayPal窗口关闭事件
function handlePayPalWindowClosed() {
    console.log('===DEBUG=== handlePayPalWindowClosed被调用', new Date().toISOString());
    console.log('===DEBUG=== 当前状态检查: paymentCompleted=', paymentCompleted, 
                'paymentCancelled=', paymentCancelled, 
                'paypalOrderCreated=', paypalOrderCreated,
                'paymentProcessing=', sessionStorage.getItem('paymentProcessing'));
    
    // 如果支付已完成或已取消，不需要做任何处理
    if (paymentCompleted || paymentCancelled) {
        console.log('===DEBUG=== 支付已完成或已取消，不需要额外处理');
        return;
    }
    
    // 如果订单未创建，显示订单创建失败
    if (!paypalOrderCreated) {
        console.log('===DEBUG=== PayPal订单未创建就关闭了窗口');
        showError('PayPal payment process was interrupted before order creation.');
        resetPaymentState();
        return;
    }
    
    // 检查是否有存储的订单ID
    const orderId = localStorage.getItem('paypalOrderId');
    console.log('===DEBUG=== 检查存储的订单ID:', orderId);
    
    if (!orderId) {
        console.log('===DEBUG=== 无法找到PayPal订单ID');
        showError('PayPal payment was not completed. The order information is missing.');
        resetPaymentState();
        return;
    }
    
    // 获取支付意向ID
    const paymentIntentId = localStorage.getItem('paymentIntentId');
    console.log('===DEBUG=== 检查存储的支付意向ID:', paymentIntentId);
    
    if (!paymentIntentId) {
        console.log('===DEBUG=== 无法找到支付意向ID');
        showError('Payment information is missing. Please try again.');
        resetPaymentState();
        return;
    }
    
    console.log('===DEBUG=== 窗口关闭但未检测到支付完成或取消，尝试检查支付状态');
    
    // 设置标志防止多次处理
    if (sessionStorage.getItem('handleClosedInProgress') === 'true') {
        console.log('===DEBUG=== 已有处理进程在运行，避免重复处理');
        return;
    }
    
    sessionStorage.setItem('handleClosedInProgress', 'true');
    
    // 延迟一秒，给onApprove或onCancel回调有机会先执行
    setTimeout(() => {
        console.log('===DEBUG=== 延迟后检查支付状态');
        
        // 再次检查支付是否已完成或已取消
        if (paymentCompleted || paymentCancelled) {
            console.log('===DEBUG=== 延迟后发现支付已完成或已取消，释放处理锁');
            sessionStorage.removeItem('handleClosedInProgress');
            return;
        }
        
        // 如果支付未完成也未取消，则认为用户取消了支付，调用取消API
        console.log('===DEBUG=== 支付未完成且未取消，认为是用户关闭窗口取消了支付');
        
        cancelPayPalPayment(true)
            .then(response => {
                console.log('===DEBUG=== 取消PayPal支付响应:', response);
                
                // 显示支付取消消息
                showMessage('Payment was cancelled.');
                resetPaymentState();
            })
            .catch(error => {
                console.error('===DEBUG=== 取消PayPal支付失败:', error);
                
                // 如果取消失败，可能是网络问题，尝试启动支付状态检查
                if (!window.paypalStatusCheckActive) {
                    console.log('===DEBUG=== 取消失败，启动支付状态检查');
                    startPayPalStatusCheck(paymentIntentId, orderId);
                } else {
                    console.log('===DEBUG=== 支付状态检查已在运行');
                }
            })
            .finally(() => {
                sessionStorage.removeItem('handleClosedInProgress');
            });
    }, 1000);
}

// 监控PayPal弹出窗口的状态
function monitorPayPalPopupWindow(popup) {
    console.log('===DEBUG=== 开始监控PayPal弹窗', new Date().toISOString());
    
    if (!popup) {
        console.error('===DEBUG=== monitorPayPalPopupWindow收到null弹窗引用');
        return;
    }
    
    // 保存弹出窗口引用
    paypalPopupWindow = popup;
    
    // 尝试设置beforeunload事件监听器
    try {
        console.log('===DEBUG=== 尝试为PayPal弹窗设置beforeunload事件监听');
        if (popup.addEventListener) {
            popup.addEventListener('beforeunload', function() {
                console.log('===DEBUG=== PayPal弹窗beforeunload事件触发', new Date().toISOString());
                // 不立即执行关闭处理，留给窗口状态检查处理
            });
        }
    } catch (e) {
        console.log('===DEBUG=== 无法设置PayPal弹窗beforeunload事件:', e);
    }
    
    // 清除之前的检查定时器
    if (paypalPopupCheckInterval) {
        console.log('===DEBUG=== 清除之前的PayPal弹窗检查定时器:', paypalPopupCheckInterval);
        clearInterval(paypalPopupCheckInterval);
    }
    
    // 生成唯一的监控ID用于日志跟踪
    const monitorId = Math.random().toString(36).substring(2, 8);
    console.log(`===DEBUG=== 创建新的PayPal弹窗监控实例 ID=${monitorId}`);
    
    // 记录初始窗口状态
    try {
        console.log(`===DEBUG=== 监控器${monitorId}: 初始窗口状态 - closed=${popup.closed}`);
    } catch (e) {
        console.error(`===DEBUG=== 监控器${monitorId}: 无法获取初始窗口状态:`, e);
    }
    
    // 设置新的检查定时器
    paypalPopupCheckInterval = setInterval(() => {
        // 检查窗口是否已关闭
        try {
            if (!paypalPopupWindow) {
                console.log(`===DEBUG=== 监控器${monitorId}: PayPal弹窗引用为空`);
                clearInterval(paypalPopupCheckInterval);
                return;
            }
            
            console.log(`===DEBUG=== 监控器${monitorId}: 检查窗口状态, closed=${paypalPopupWindow.closed}, paypalOrderCreated=${paypalOrderCreated}`);
            
            if (paypalPopupWindow.closed) {
                console.log(`===DEBUG=== 监控器${monitorId}: 检测到PayPal弹窗已关闭`, new Date().toISOString());
                clearInterval(paypalPopupCheckInterval);
                paypalPopupWindow = null;
                
                // 延迟处理窗口关闭事件，避免与onApprove回调竞争
                console.log(`===DEBUG=== 监控器${monitorId}: 延迟300ms调用handlePayPalWindowClosed`);
                setTimeout(() => {
                    console.log(`===DEBUG=== 监控器${monitorId}: 延迟结束，现在调用handlePayPalWindowClosed`);
                    handlePayPalWindowClosed();
                }, 300);
                return;
            }
            
            // 尝试访问窗口位置以检查窗口是否仍然可访问
            try {
                const url = paypalPopupWindow.location.href;
                console.log(`===DEBUG=== 监控器${monitorId}: PayPal弹窗当前URL: ${url}`);
                
                // 检查URL变化，可能表明用户执行了某些操作
                if (url.includes('cancel') || url.includes('Cancelled')) {
                    console.log(`===DEBUG=== 监控器${monitorId}: 检测到取消URL模式`);
                }
            } catch (e) {
                // 如果由于跨域而无法访问，这是正常的
                console.log(`===DEBUG=== 监控器${monitorId}: 无法访问PayPal弹窗URL (可能是跨域限制)`);
            }
        } catch (e) {
            console.error(`===DEBUG=== 监控器${monitorId}: 监控PayPal弹窗出错:`, e);
        }
    }, 500); // 每500毫秒检查一次
    
    // 设置监控超时，防止无限监控
    setTimeout(() => {
        if (paypalPopupCheckInterval) {
            console.log(`===DEBUG=== 监控器${monitorId}: 监控超时(2分钟)，清除监控器`);
            clearInterval(paypalPopupCheckInterval);
            paypalPopupCheckInterval = null;
            
            // 如果窗口仍然存在但订单状态未变，可能是用户忘记了窗口
            try {
                if (paypalPopupWindow && !paypalPopupWindow.closed && paypalOrderCreated) {
                    console.log(`===DEBUG=== 监控器${monitorId}: 检测到可能的遗忘窗口，尝试关闭`);
                    paypalPopupWindow.close();
                    paypalPopupWindow = null;
                    
                    // 处理窗口关闭
                    console.log(`===DEBUG=== 监控器${monitorId}: 调用handlePayPalWindowClosed处理遗忘窗口`);
                    handlePayPalWindowClosed();
                }
            } catch (e) {
                console.error(`===DEBUG=== 监控器${monitorId}: 关闭遗忘窗口失败:`, e);
            }
        }
    }, 120000); // 2分钟超时
}

// 初始化页面
document.addEventListener('DOMContentLoaded', function() {
    // 初始化Socket连接
    const socket = io();
    
    // 从URL获取支付ID
    const urlParams = new URLSearchParams(window.location.search);
    const paymentId = urlParams.get('id');
    
    if (!paymentId) {
        showError('未提供支付ID参数');
        return;
    }
    
    // 加载支付详情
    loadPaymentDetails(paymentId).then(() => {
        // 加载成功后初始化PayPal按钮
        initPayPalButton();
    });
    
    // 初始化事件监听器
    initEventListeners();
    
    // 连接钱包按钮点击事件
    document.getElementById('connect-wallet').addEventListener('click', connectWallet);
});

// 加载支付详情
async function loadPaymentDetails(paymentId) {
    try {
        const response = await fetch(`/api/payment-intents/${paymentId}`);
        
        if (response.status === 404) {
            showError('找不到该支付');
            return;
        }
        
        if (!response.ok) {
            const errorData = await response.json();
            showError(`加载支付详情失败: ${errorData.message || '未知错误'}`);
            return;
        }
        
        const data = await response.json();
        paymentData = data;
        
        // 更新UI显示支付详情
        updatePaymentDetailsUI(data);
        
        // 检查是否有未完成的PayPal支付
        checkPendingPayPalPayment(paymentId);
        
        return data; // 返回数据以便链式调用
    } catch (error) {
        console.error('加载支付详情错误:', error);
        showError(`加载支付详情失败: ${error.message}`);
    }
}

// 更新支付详情UI
function updatePaymentDetailsUI(data) {
    document.getElementById('payment-id').textContent = data.id || '-';
    document.getElementById('payment-amount').textContent = `${data.amount} ${data.currency || 'USDT'}`;
    document.getElementById('payment-status').textContent = getStatusText(data.status);
    document.getElementById('lp-address').textContent = data.lpWalletAddress || '-';
    
    // 添加商家PayPal邮箱信息（如果存在）
    const merchantEmailElement = document.getElementById('merchant-paypal-email');
    if (merchantEmailElement) {
        if (data.merchantPaypalEmail) {
            merchantEmailElement.textContent = data.merchantPaypalEmail;
            document.getElementById('merchant-email-container').style.display = 'flex';
        } else {
            document.getElementById('merchant-email-container').style.display = 'none';
        }
    }
    
    // 格式化创建时间
    const createdDate = data.createdAt ? new Date(data.createdAt) : null;
    document.getElementById('created-at').textContent = createdDate ? 
        createdDate.toLocaleString() : '-';
    
    // 添加PayPal交易详情
    const paymentProofSection = document.querySelector('.payment-info');
    if (paymentProofSection && (data.status === 'paid' || data.status === 'confirmed')) {
        let paymentProof = data.paymentProof;
        
        if (typeof paymentProof === 'string') {
            try {
                paymentProof = JSON.parse(paymentProof);
            } catch (e) {
                console.error('解析支付凭证失败:', e);
                paymentProof = {};
            }
        }
        
        // 如果已有交易详情元素，则移除它
        const existingProofDetails = document.getElementById('payment-proof-details');
        if (existingProofDetails) {
            existingProofDetails.remove();
        }
        
        // 创建交易详情元素
        const proofDetails = document.createElement('div');
        proofDetails.id = 'payment-proof-details';
        proofDetails.className = 'card mt-3';
        proofDetails.innerHTML = `
            <div class="card-body">
                <h4>交易详情</h4>
                <div class="info-row">
                    <label>支付平台:</label>
                    <span>${data.platform || '未知'}</span>
                </div>
                ${paymentProof?.paypalOrderId ? `
                <div class="info-row">
                    <label>PayPal订单ID:</label>
                    <span style="font-family: monospace;">${paymentProof.paypalOrderId}</span>
                </div>` : ''}
                ${paymentProof?.paypalCaptureId ? `
                <div class="info-row">
                    <label>PayPal交易ID:</label>
                    <span style="font-family: monospace;">${paymentProof.paypalCaptureId}</span>
                </div>` : ''}
                ${paymentProof?.captureId ? `
                <div class="info-row">
                    <label>交易ID:</label>
                    <span style="font-family: monospace;">${paymentProof.captureId}</span>
                </div>` : ''}
                ${paymentProof?.transactionId ? `
                <div class="info-row">
                    <label>交易ID:</label>
                    <span style="font-family: monospace;">${paymentProof.transactionId}</span>
                </div>` : ''}
                ${paymentProof?.transactionTime ? `
                <div class="info-row">
                    <label>支付时间:</label>
                    <span>${new Date(paymentProof.transactionTime).toLocaleString()}</span>
                </div>` : ''}
                <div class="mt-3">
                    <a href="https://sandbox.paypal.com/merchantapps/app/account/transactions" target="_blank" class="btn btn-sm btn-outline-primary">
                        PayPal商家中心
                    </a>
                </div>
            </div>
        `;
        
        // 插入到支付详情卡片中
        document.getElementById('payment-details').appendChild(proofDetails);
    }
    
    // 如果支付状态是已支付或已确认，显示退款按钮
    const refundButtonContainer = document.getElementById('refund-button-container');
    if (refundButtonContainer) {
        if (data.status === 'paid' || data.status === 'confirmed') {
            refundButtonContainer.style.display = 'block';
            document.getElementById('refund-button').onclick = () => handlePayPalRefund(data.id);
        } else if (data.status === 'refunded') {
            refundButtonContainer.style.display = 'block';
            document.getElementById('refund-button').textContent = '检查退款状态';
            document.getElementById('refund-button').onclick = () => checkPayPalRefundStatus(data.id);
        } else {
            refundButtonContainer.style.display = 'none';
        }
    }
    
    // 如果支付状态为失败，显示错误详情
    const errorDetailsContainer = document.getElementById('error-details-container');
    if (errorDetailsContainer) {
        if (data.status === 'failed' && data.errorDetails) {
            let errorDetails = data.errorDetails;
            if (typeof errorDetails === 'string') {
                try {
                    errorDetails = JSON.parse(errorDetails);
                } catch (e) {
                    errorDetails = { message: errorDetails };
                }
            }
            
            errorDetailsContainer.style.display = 'block';
            document.getElementById('error-message').textContent = errorDetails.message || '未知错误';
            document.getElementById('error-code').textContent = errorDetails.code || '无错误代码';
            document.getElementById('error-time').textContent = errorDetails.timestamp ? 
                new Date(errorDetails.timestamp).toLocaleString() : '-';
        } else {
            errorDetailsContainer.style.display = 'none';
        }
    }
}

// 获取状态文本
function getStatusText(status) {
    const statusMap = {
        'created': '已创建',
        'processing': '处理中',
        'succeeded': '已完成',
        'canceled': '已取消',
        'failed': '失败'
    };
    
    return statusMap[status] || status;
}

// 初始化事件监听器
function initEventListeners() {
    // 标签切换
    document.getElementById('tab-api').addEventListener('click', () => switchTab('api'));
    document.getElementById('tab-blockchain').addEventListener('click', () => switchTab('blockchain'));
    
    // API结算表单提交
    document.getElementById('payment-form').addEventListener('submit', handleApiSettlement);
    
    // 区块链结算按钮
    document.getElementById('approve-usdt').addEventListener('click', approveUSDT);
    document.getElementById('settle-payment').addEventListener('click', settlePaymentOnChain);
    
    // 返回仪表板按钮
    document.getElementById('back-to-dashboard').addEventListener('click', () => {
        window.location.href = '/';
    });
    
    // 支付取消UI中的按钮
    const retryPaymentBtn = document.getElementById('retry-payment');
    if (retryPaymentBtn) {
        retryPaymentBtn.addEventListener('click', () => {
            // 隐藏取消UI，显示支付选项
            document.getElementById('payment-cancelled').style.display = 'none';
            document.getElementById('payment-options').style.display = 'block';
            
            // 重置支付状态
            resetPaymentState();
            
            // 重新初始化PayPal按钮
            initPayPalButton();
        });
    }
    
    const backFromCancelBtn = document.getElementById('back-from-cancel');
    if (backFromCancelBtn) {
        backFromCancelBtn.addEventListener('click', () => {
            window.location.href = '/';
        });
    }
    
    // 支付方式选择变更
    document.getElementById('payment-method').addEventListener('change', function() {
        const paymentMethod = this.value;
        const proofContainer = document.getElementById('payment-proof-container');
        const paypalButtonContainer = document.getElementById('paypal-button-container');
        
        if (paymentMethod === 'paypal') {
            // 选择PayPal支付，显示PayPal按钮
            if (proofContainer) proofContainer.style.display = 'none';
            if (paypalButtonContainer) paypalButtonContainer.style.display = 'block';
            
            // 隐藏常规提交按钮
            const submitButton = document.getElementById('submit-payment');
            if (submitButton) submitButton.style.display = 'none';
            
            // 确保PayPal按钮已初始化
            initPayPalButton();
        } else {
            // 选择其他支付方式，显示常规提交表单
            if (proofContainer) proofContainer.style.display = 'block';
            if (paypalButtonContainer) paypalButtonContainer.style.display = 'none';
            
            // 显示常规提交按钮
            const submitButton = document.getElementById('submit-payment');
            if (submitButton) submitButton.style.display = 'block';
        }
    });
}

// 切换标签
function switchTab(tabName) {
    // 更新标签按钮状态
    document.getElementById('tab-api').classList.toggle('active', tabName === 'api');
    document.getElementById('tab-blockchain').classList.toggle('active', tabName === 'blockchain');
    
    // 显示/隐藏相应的表单
    document.getElementById('api-settlement').classList.toggle('hidden', tabName !== 'api');
    document.getElementById('blockchain-settlement').classList.toggle('hidden', tabName !== 'blockchain');
}

// 处理API结算
async function handleApiSettlement(event) {
    event.preventDefault();
    
    const paymentMethod = document.getElementById('payment-method').value;
    
    // 如果是PayPal支付，不进行常规提交
    if (paymentMethod === 'paypal') {
        // PayPal支付通过PayPal按钮直接处理
        return;
    }
    
    const submitButton = document.getElementById('submit-payment');
    submitButton.disabled = true;
    submitButton.textContent = '提交中...';
    
    try {
        const paymentProof = document.getElementById('payment-proof').value;
        
        if (!paymentMethod || !paymentProof) {
            showError('请填写所有必填字段');
            submitButton.disabled = false;
            submitButton.textContent = '提交支付';
            return;
        }
        
        // 构建支付证明数据
        const proofData = {
            method: paymentMethod,
            proof: paymentProof
        };
        
        // 确认支付
        const response = await fetch(`/api/payment-intents/${paymentData.id}/confirm`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ proof: proofData })
        });
        
        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.message || '支付确认失败');
        }
        
        // 显示成功信息
        const successData = await response.json();
        showSuccess('api', successData);
    } catch (error) {
        console.error('API结算错误:', error);
        showError(`支付确认失败: ${error.message}`);
        submitButton.disabled = false;
        submitButton.textContent = '提交支付';
    }
}

// 连接钱包
async function connectWallet() {
    try {
        // 初始化Web3和合约
        const walletAddress = await contractService.connectWallet();
        
        if (!walletAddress) {
            showError('连接钱包失败');
            return;
        }
        
        // 更新UI
        document.getElementById('connect-wallet').classList.add('hidden');
        document.getElementById('wallet-connected').classList.remove('hidden');
        document.getElementById('wallet-address').textContent = shortenAddress(walletAddress);
        
        // 更新区块链结算步骤状态
        document.getElementById('step1-status').textContent = '已连接';
        document.getElementById('step1-status').className = 'step-status success';
        
        // 启用"批准USDT"按钮
        document.getElementById('approve-usdt').disabled = false;
        
        // 获取并显示USDT余额
        updateUSDTBalance();
    } catch (error) {
        console.error('连接钱包错误:', error);
        showError(`连接钱包失败: ${error.message}`);
    }
}

// 批准USDT转账
async function approveUSDT() {
    const approveButton = document.getElementById('approve-usdt');
    approveButton.disabled = true;
    approveButton.textContent = '授权中...';
    
    try {
        if (!paymentData) {
            throw new Error('支付数据不可用');
        }
        
        // 获取USDT金额并增加10%作为缓冲
        const amount = parseFloat(paymentData.amount) * 1.1;
        
        // 批准USDT
        const approved = await contractService.approveUSDT(amount);
        
        if (!approved) {
            throw new Error('USDT授权失败');
        }
        
        // 更新UI
        document.getElementById('step2-status').textContent = '已授权';
        document.getElementById('step2-status').className = 'step-status success';
        
        // 启用"结算支付"按钮
        document.getElementById('settle-payment').disabled = false;
        
        // 恢复按钮状态
        approveButton.textContent = '已授权USDT';
    } catch (error) {
        console.error('USDT授权错误:', error);
        showError(`USDT授权失败: ${error.message}`);
        
        // 恢复按钮状态
        approveButton.disabled = false;
        approveButton.textContent = '授权USDT';
    }
}

// 在区块链上结算支付
async function settlePaymentOnChain() {
    const settleButton = document.getElementById('settle-payment');
    settleButton.disabled = true;
    settleButton.textContent = '结算中...';
    
    try {
        if (!paymentData) {
            throw new Error('支付数据不可用');
        }
        
        // 验证LP钱包地址
        if (!paymentData.lpWalletAddress || !/^0x[a-fA-F0-9]{40}$/.test(paymentData.lpWalletAddress)) {
            throw new Error('无效的LP钱包地址');
        }
        
        // 结算支付
        const result = await contractService.settlePayment(
            paymentData.lpWalletAddress,
            parseFloat(paymentData.amount),
            paymentData.id
        );
        
        if (!result.success) {
            throw new Error(result.error || '区块链结算失败');
        }
        
        // 更新UI
        document.getElementById('step3-status').textContent = '已结算';
        document.getElementById('step3-status').className = 'step-status success';
        
        // 显示交易结果
        document.getElementById('blockchain-result').classList.remove('hidden');
        document.getElementById('tx-hash').textContent = result.txHash;
        document.getElementById('tx-hash').href = `${contractService.networkConfig.BLOCK_EXPLORER}/tx/${result.txHash}`;
        document.getElementById('tx-status').textContent = '成功';
        
        // 向后端API报告链上结算成功
        await reportBlockchainSettlement(result.txHash);
        
        // 显示成功信息
        showSuccess('blockchain', { 
            id: paymentData.id,
            amount: paymentData.amount,
            txHash: result.txHash
        });
    } catch (error) {
        console.error('区块链结算错误:', error);
        showError(`区块链结算失败: ${error.message}`);
        
        // 恢复按钮状态
        settleButton.disabled = false;
        settleButton.textContent = '结算支付';
        
        // 显示交易结果（如果有）
        if (error.txHash) {
            document.getElementById('blockchain-result').classList.remove('hidden');
            document.getElementById('tx-hash').textContent = error.txHash;
            document.getElementById('tx-hash').href = `${contractService.networkConfig.BLOCK_EXPLORER}/tx/${error.txHash}`;
            document.getElementById('tx-status').textContent = '失败';
        }
    }
}

// 向后端API报告区块链结算
async function reportBlockchainSettlement(txHash) {
    try {
        const response = await fetch(`/api/payment-intents/${paymentData.id}/confirm`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                proof: {
                    method: 'blockchain',
                    proof: txHash,
                    blockchain: 'BSC'
                }
            })
        });
        
        if (!response.ok) {
            const errorData = await response.json();
            console.error('报告区块链结算到API失败:', errorData);
        }
    } catch (error) {
        console.error('报告区块链结算错误:', error);
    }
}

// 更新USDT余额
async function updateUSDTBalance() {
    try {
        const balance = await contractService.getUSDTBalance();
        document.getElementById('usdt-balance').textContent = `USDT: ${balance}`;
    } catch (error) {
        console.error('获取USDT余额错误:', error);
    }
}

/**
 * 显示支付成功UI
 * @param {string} method 支付方式
 * @param {object} data 成功数据
 */
function showSuccess(method, data) {
    // 隐藏支付选项
    const paymentOptions = document.getElementById('payment-options');
    if (paymentOptions) {
        paymentOptions.style.display = 'none';
    }
    
    // 显示成功信息
    const successElement = document.getElementById('payment-success');
    if (successElement) {
        successElement.classList.remove('hidden');
        
        // 更新成功信息详情
        document.getElementById('success-payment-id').textContent = data.id || '-';
        document.getElementById('success-amount').textContent = `${data.amount} ${data.currency || 'USD'}`;
        document.getElementById('success-method').textContent = method === 'paypal' 
            ? 'PayPal在线支付' 
            : (method === 'blockchain' ? '区块链USDT' : '手动API结算');
    }
    
    // 如果是PayPal支付，在控制台显示一些信息
    if (method === 'paypal' && data.captureId) {
        console.log('PayPal支付成功，捕获ID:', data.captureId);
    }
    
    // 3秒后刷新页面以显示最新状态
    setTimeout(() => {
        loadPaymentDetails(data.id);
    }, 3000);
}

/**
 * 显示错误信息
 * @param {string} message 错误消息
 */
function showError(message) {
    // 移除之前的错误消息
    const previousError = document.getElementById('error-message-container');
    if (previousError) {
        previousError.remove();
    }
    
    // 创建新的错误消息
    const errorDiv = document.createElement('div');
    errorDiv.id = 'error-message-container';
    errorDiv.className = 'error-message';
    errorDiv.textContent = message;
    
    // 添加到页面
    document.getElementById('message').appendChild(errorDiv);
    
    // 5秒后自动隐藏
    setTimeout(() => {
        errorDiv.style.opacity = '0';
        setTimeout(() => {
            if (errorDiv.parentNode) {
                errorDiv.parentNode.removeChild(errorDiv);
            }
        }, 500);
    }, 5000);
}

// 缩短地址显示
function shortenAddress(address) {
    if (!address) return '';
    return `${address.substring(0, 6)}...${address.substring(address.length - 4)}`;
}

// 处理PayPal退款
async function handlePayPalRefund(paymentIntentId) {
    try {
        if (!confirm('确定要申请退款吗？此操作不可撤销。')) {
            return;
        }
        
        // 获取当前用户钱包地址
        const userWalletAddress = getUserWalletAddress();
        if (!userWalletAddress) {
            showError('请先连接钱包');
            return;
        }
        
        // 获取退款原因（可选）
        const reason = prompt('请输入退款原因（可选）:');
        
        // 发起退款请求
        const response = await fetch('/api/payment/paypal/refund', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                paymentIntentId,
                userWalletAddress,
                reason
            })
        });
        
        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.message || '退款请求失败');
        }
        
        const result = await response.json();
        
        // 显示成功消息
        alert('退款请求已提交，退款状态：' + result.data.status);
        
        // 刷新页面或重新加载支付详情
        await loadPaymentDetails(paymentIntentId);
        
    } catch (error) {
        console.error('PayPal退款错误:', error);
        showError(`PayPal退款失败: ${error.message}`);
    }
}

// 检查PayPal退款状态
async function checkPayPalRefundStatus(paymentIntentId) {
    try {
        const response = await fetch(`/api/payment/paypal/refund-status/${paymentIntentId}`);
        
        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.message || '获取退款状态失败');
        }
        
        const result = await response.json();
        
        // 显示退款状态
        alert(`退款状态: ${result.data.paypalRefundStatus}`);
        
    } catch (error) {
        console.error('检查PayPal退款状态错误:', error);
        showError(`获取退款状态失败: ${error.message}`);
    }
}

/**
 * 初始化PayPal按钮
 */
function initPayPalButton() {
    const paymentIntentId = document.getElementById('payment-intent-id').value;
    console.log('===DEBUG=== initPayPalButton开始，paymentIntentId:', paymentIntentId, new Date().toISOString());
    
    if (!paypal || !paypal.Buttons) {
        console.error('PayPal SDK未加载');
        showError('PayPal支付暂时不可用，请稍后再试');
        return;
    }
    
    // 清空按钮容器
    const buttonContainer = document.getElementById('paypal-button-container');
    buttonContainer.innerHTML = '';
    
    // 创建PayPal按钮
    paypal.Buttons({
        // 创建订单时的回调
        createOrder: function() {
            return createPayPalOrder();
        },
        
        // 用户批准支付后的回调
        onApprove: async function(data, actions) {
            console.log('PayPal支付已批准:', data);
            
            try {
                // 显示处理中UI
                showPayPalProcessingUI('正在完成支付...');
                
                // 捕获付款
                const response = await fetch(`/api/payment/paypal/capture-order`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        orderId: data.orderID,
                        paymentIntentId: paymentIntentId
                    })
                });
                
                if (!response.ok) {
                    throw new Error(`捕获付款失败: ${response.status}`);
                }
                
                const captureData = await response.json();
                
                // 重置订单创建状态
                paypalOrderCreated = false;
                
                // 移除本地存储的订单ID
                localStorage.removeItem(`paypal_order_${paymentIntentId}`);
                
                if (captureData.success) {
                    console.log('PayPal付款捕获成功:', captureData);
                    
                    // 显示成功消息
                    showInfo('支付成功处理中，请稍候...');
                    
                    // 开始检查支付状态，确保后端处理完成
                    startPayPalStatusCheck(paymentIntentId);
                    
                    // 1秒后刷新页面显示最新状态
                    setTimeout(() => {
                        loadPaymentDetails(paymentIntentId);
                    }, 1000);
                } else {
                    throw new Error(captureData.message || '捕获付款失败');
                }
            } catch (error) {
                console.error('PayPal付款捕获错误:', error);
                showError('完成支付失败: ' + error.message);
                hidePayPalProcessingUI();
            }
        },
        
        // 用户取消支付
        onCancel: function(data) {
            console.log('用户在PayPal页面取消了支付:', data);
            
            // 设置订单为未创建状态，防止状态检查显示支付成功
            paypalOrderCreated = false;
            
            // 当用户关闭PayPal窗口或取消时，显示处理取消中的状态
            showPayPalProcessingUI('正在处理取消...');
            
            // 使用setTimeout确保UI更新后再执行取消操作
            setTimeout(() => {
                // 显式调用取消订单API
                cancelPayPalPayment();
            }, 100);
        },
        
        // 支付过程中出现错误
        onError: function(err) {
            console.error('PayPal支付错误:', err);
            
            // 设置订单为未创建状态，防止状态检查显示支付成功
            paypalOrderCreated = false;
            
            showError('PayPal支付出错: ' + (err.message || '未知错误'));
            hidePayPalProcessingUI();
        }
    }).render('#paypal-button-container');
    
    console.log('PayPal按钮已初始化');
}

// 更新处理状态UI
function updateProcessingStatus(message) {
    const processingStatus = document.getElementById('processing-status');
    if (processingStatus) {
        processingStatus.textContent = message;
    }
}

// 显示处理中UI
function showPayPalProcessingUI() {
    // 隐藏原始按钮
    const paypalButtonContainer = document.getElementById('paypal-button-container');
    if (paypalButtonContainer) {
        paypalButtonContainer.style.display = 'none';
    }
    
    // 创建或显示处理UI
    let processingUI = document.getElementById('paypal-processing-ui');
    if (!processingUI) {
        processingUI = document.createElement('div');
        processingUI.id = 'paypal-processing-ui';
        processingUI.className = 'paypal-processing-overlay';
        processingUI.innerHTML = `
            <div class="paypal-processing-content">
                <div class="spinner"></div>
                <p id="processing-status">正在处理付款...</p>
                <button id="cancel-paypal-btn" class="btn btn-danger">取消支付</button>
            </div>
        `;
        document.body.appendChild(processingUI);
        
        // 添加取消按钮事件
        document.getElementById('cancel-paypal-btn').addEventListener('click', cancelPayPalPayment);
    } else {
        processingUI.style.display = 'flex';
    }
}

// 隐藏处理中UI并恢复按钮
function hidePayPalProcessingUI() {
    const processingUI = document.getElementById('paypal-processing-ui');
    if (processingUI) {
        processingUI.style.display = 'none';
    }
    
    // 恢复PayPal按钮
    const paypalButtonContainer = document.getElementById('paypal-button-container');
    if (paypalButtonContainer) {
        paypalButtonContainer.style.display = 'block';
        // 重新初始化PayPal按钮
        initPayPalButton();
    }
}

/**
 * 显示消息提示
 * @param {string} message 消息文本
 * @param {string} type 消息类型 ('info', 'error', 'success', 'warning')
 */
function showMessage(message, type = 'info') {
    console.log(`===DEBUG=== 显示消息: ${message}, 类型: ${type}`);
    
    // 移除之前的消息
    const previousMessage = document.getElementById('message-container');
    if (previousMessage) {
        previousMessage.remove();
    }
    
    // 创建新的消息元素
    const messageDiv = document.createElement('div');
    messageDiv.id = 'message-container';
    messageDiv.className = `message ${type}-message`;
    messageDiv.textContent = message;
    
    // 添加到页面
    const messageContainer = document.getElementById('message');
    if (messageContainer) {
        messageContainer.appendChild(messageDiv);
    } else {
        // 如果没有特定的消息容器，添加到body
        document.body.appendChild(messageDiv);
    }
    
    // 显示支付取消UI (如果是取消消息)
    if (message.toLowerCase().includes('cancel')) {
        const paymentCancelled = document.getElementById('payment-cancelled');
        if (paymentCancelled) {
            paymentCancelled.style.display = 'block';
        }
        
        // 隐藏其他支付相关UI
        const processingContainer = document.getElementById('paypal-processing-container');
        if (processingContainer) {
            processingContainer.style.display = 'none';
        }
        
        const paymentSuccess = document.getElementById('payment-success');
        if (paymentSuccess) {
            paymentSuccess.style.display = 'none';
        }
    }
    
    // 5秒后自动隐藏
    setTimeout(() => {
        messageDiv.style.opacity = '0';
        setTimeout(() => {
            if (messageDiv.parentNode) {
                messageDiv.parentNode.removeChild(messageDiv);
            }
        }, 500);
    }, 5000);
}

/**
 * 取消PayPal支付
 */
async function cancelPayPalPayment(isWindowClosing = false) {
    console.log('===DEBUG=== 开始取消PayPal支付', 'isWindowClosing=', isWindowClosing);
    
    // 设置取消标志，防止状态检查误判
    window.paymentCancelled = true;
    localStorage.setItem('paymentCancelledAt', Date.now().toString());
    
    // 获取支付意向ID和订单ID
    const paymentIntentId = document.getElementById('payment-intent-id')?.value 
                           || localStorage.getItem('paymentIntentId');
    const orderId = localStorage.getItem('paypalOrderId');
    
    if (!paymentIntentId) {
        console.error('===DEBUG=== 取消支付失败：找不到支付意向ID');
        return;
    }
    
    // 如果不是因为窗口关闭而取消，则显示处理中状态
    if (!isWindowClosing) {
        updateProcessingStatus('Cancelling payment...');
    }
    
    try {
        // 调用取消API
        const response = await fetch(`${API_BASE_URL}/payment/paypal/cancel-order`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                paymentIntentId,
                orderId
            })
        });
        
        if (!response.ok) {
            throw new Error('Failed to cancel payment');
        }
        
        const data = await response.json();
        console.log('===DEBUG=== 取消支付响应:', data);
        
        // 清除状态检查
        if (window.paypalStatusCheckInterval) {
            clearInterval(window.paypalStatusCheckInterval);
            window.paypalStatusCheckInterval = null;
        }
        
        // 隐藏处理中UI
        hidePayPalProcessingUI();
        
        // 显示取消消息
        if (!isWindowClosing) {
            showMessage('Payment cancelled successfully.', 'info');
            document.getElementById('cancelled-payment-id').textContent = paymentIntentId;
            document.getElementById('payment-cancelled').style.display = 'block';
        }
        
        // 重置状态
        localStorage.removeItem('paymentIntentId');
        localStorage.removeItem('paypalOrderId');
        localStorage.removeItem('paymentCancelledAt');
        window.paymentCancelled = false;
        
        // 延迟2秒后刷新支付详情
        setTimeout(() => {
            if (!isWindowClosing) {
                refreshPaymentDetails();
            }
        }, 2000);
        
    } catch (error) {
        console.error('===DEBUG=== 取消支付时出错:', error);
        
        // 即使出错也要重置状态
        localStorage.removeItem('paymentIntentId');
        localStorage.removeItem('paypalOrderId');
        localStorage.removeItem('paymentCancelledAt');
        window.paymentCancelled = false;
        
        if (!isWindowClosing) {
            hidePayPalProcessingUI();
            showError('Failed to cancel payment. Please try again.');
        }
    }
}

/**
 * 获取当前连接的钱包地址
 */
function getUserWalletAddress() {
    // 如果已经有获取钱包地址的方法，使用现有方法
    if (typeof contractService !== 'undefined' && contractService.getWalletAddress) {
        return contractService.getWalletAddress();
    }
    
    // 否则从UI中获取
    const walletAddressElement = document.getElementById('wallet-address');
    if (walletAddressElement && walletAddressElement.textContent) {
        const address = walletAddressElement.textContent.trim();
        // 检查是否看起来像一个有效的地址
        if (address.startsWith('0x') && address.length >= 10) {
            return address;
        }
    }
    
    return null;
}

/**
 * 检查是否有未完成的PayPal支付
 */
function checkPendingPayPalPayment(paymentId) {
    try {
        // 检查是否已取消
        const paymentCancelledAt = localStorage.getItem('paymentCancelledAt');
        if (paymentCancelledAt) {
            console.log('===DEBUG=== 检测到支付已被取消，不重启状态检查');
            return;
        }

        // 从localStorage中获取PayPal订单ID
        const paypalOrderId = localStorage.getItem('paypal_order_' + paymentId);
        
        // 如果有PayPal订单ID，表示之前的支付流程未完成
        if (paypalOrderId && paymentData && (paymentData.status === 'created' || paymentData.status === 'processing')) {
            console.log('===DEBUG=== 检测到未完成的PayPal支付，开始状态检查...');
            
            // 自动选择PayPal支付方式
            const paymentMethodSelect = document.getElementById('payment-method');
            if (paymentMethodSelect) {
                paymentMethodSelect.value = 'paypal';
                // 触发change事件以显示PayPal按钮
                paymentMethodSelect.dispatchEvent(new Event('change'));
            }
            
            // 开始检查支付状态
            startPayPalStatusCheck(paypalOrderId);
        }
    } catch (error) {
        console.error('===DEBUG=== 检查未完成PayPal支付错误:', error);
    }
}

/**
 * 检查钱包是否已连接
 */
function isWalletConnected() {
    // 如果有contractService.isConnected方法，使用它
    if (typeof contractService !== 'undefined' && typeof contractService.isConnected === 'function') {
        return contractService.isConnected();
    }
    
    // 否则检查UI元素
    const walletConnected = document.getElementById('wallet-connected');
    const walletAddress = document.getElementById('wallet-address');
    
    return walletConnected && 
           !walletConnected.classList.contains('hidden') && 
           walletAddress && 
           walletAddress.textContent && 
           walletAddress.textContent.trim().startsWith('0x');
}

async function createPaymentIntent(amount, platform, qrData) {
  try {
    // 解析二维码数据
    const qrInfo = parseQRCodeData(qrData);
    
    // 准备创建支付意图的数据
    const data = {
      amount: parseFloat(amount),
      platform: platform,
      description: `Payment to merchant ${qrInfo.merchantId || 'Unknown'}`,
      currency: 'USD'
    };

    // 如果是PayPal支付，添加商家PayPal邮箱
    if (platform === 'PayPal' && qrInfo.paypalEmail) {
      data.merchantPaypalEmail = qrInfo.paypalEmail;
    } else if (platform === 'PayPal') {
      throw new Error('PayPal支付需要商家的PayPal邮箱');
    }

    const response = await fetch('/api/payment-intents', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(data)
    });

    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.message || '创建支付意图失败');
    }

    const result = await response.json();
    return result.data;
  } catch (error) {
    console.error('创建支付意图时出错:', error);
    showError(error.message || '创建支付意图失败，请重试');
    throw error;
  }
}

// 解析二维码数据
function parseQRCodeData(qrData) {
  try {
    // 假设二维码数据是URL格式或JSON格式
    if (qrData.startsWith('http')) {
      // 解析URL参数
      const url = new URL(qrData);
      return {
        merchantId: url.searchParams.get('merchantId'),
        paypalEmail: url.searchParams.get('paypalEmail'),
        platform: url.searchParams.get('platform')
      };
    } else {
      // 尝试解析JSON
      return JSON.parse(qrData);
    }
  } catch (error) {
    console.error('解析二维码数据失败:', error);
    throw new Error('无效的二维码数据格式');
  }
}

function fetchMerchantInfo(paymentIntentId) {
  fetch(`/api/payment/paypal/merchant-info/${paymentIntentId}`)
    .then(response => {
      if (!response.ok) {
        throw new Error('Failed to fetch merchant info');
      }
      return response.json();
    })
    .then(data => {
      if (data.merchantPaypalEmail) {
        document.getElementById('merchant-paypal-email').textContent = data.merchantPaypalEmail;
        document.getElementById('merchant-paypal-email-container').classList.remove('d-none');
      }
    })
    .catch(error => {
      console.error('Error fetching merchant info:', error);
    });
}

function setupPaymentDetailsPage() {
  const urlParams = new URLSearchParams(window.location.search);
  const paymentIntentId = urlParams.get('id');
  
  if (paymentIntentId) {
    fetchPaymentDetails(paymentIntentId);
    fetchMerchantInfo(paymentIntentId);
  }
  // ... existing code ...
}

/**
 * 开始自动检查PayPal支付状态
 */
function startPayPalStatusCheck(orderId, checkIntervalMs = 5000, maxCheckTimeMs = 60000) {
    console.log('===DEBUG=== 开始PayPal状态检查', 
                'orderId=', orderId,
                'checkInterval=', checkIntervalMs,
                'maxCheckTime=', maxCheckTimeMs);
    
    // 保存支付意向ID和订单ID到本地存储
    const paymentIntentId = document.getElementById('payment-intent-id')?.value;
    if (paymentIntentId) {
        localStorage.setItem('paymentIntentId', paymentIntentId);
    }
    if (orderId) {
        localStorage.setItem('paypalOrderId', orderId);
    }
    
    // Check if payment was already cancelled
    const paymentCancelledAt = localStorage.getItem('paymentCancelledAt');
    if (paymentCancelledAt) {
        console.log('===DEBUG=== 检测到支付已被取消，不开始状态检查');
        showMessage('Payment was cancelled.', 'info');
        return;
    }
    
    // 设置超时时间
    const startTime = Date.now();
    
    // 清除之前的检查
    if (window.paypalStatusCheckInterval) {
        clearInterval(window.paypalStatusCheckInterval);
    }
    
    // 设置检查活动标志
    window.paypalStatusCheckActive = true;
    
    // 开始新的状态检查
    window.paypalStatusCheckInterval = setInterval(async () => {
        try {
            // 检查是否已取消
            if (paymentCancelled || localStorage.getItem('paymentCancelledAt')) {
                console.log('===DEBUG=== 检测到支付已取消，停止状态检查');
                clearInterval(window.paypalStatusCheckInterval);
                window.paypalStatusCheckInterval = null;
                window.paypalStatusCheckActive = false;
                hidePayPalProcessingUI();
                showMessage('Payment was cancelled.', 'info');
                return;
            }
            
            // 检查是否超时
            if (Date.now() - startTime > maxCheckTimeMs) {
                console.log('===DEBUG=== 状态检查超时，停止检查');
                clearInterval(window.paypalStatusCheckInterval);
                window.paypalStatusCheckInterval = null;
                window.paypalStatusCheckActive = false;
                hidePayPalProcessingUI();
                showError('Payment check timed out. Please try again.');
                return;
            }
            
            // 获取支付状态
            const response = await fetch(`${API_BASE_URL}/payment/paypal/status/${paymentIntentId}`);
            if (!response.ok) {
                throw new Error('Failed to check payment status');
            }
            
            const data = await response.json();
            console.log('===DEBUG=== 支付状态:', data);
            
            // 再次检查是否已取消 (以防状态检查期间取消)
            if (paymentCancelled || localStorage.getItem('paymentCancelledAt')) {
                console.log('===DEBUG=== 检测到支付已取消，停止状态检查');
                clearInterval(window.paypalStatusCheckInterval);
                window.paypalStatusCheckInterval = null;
                window.paypalStatusCheckActive = false;
                hidePayPalProcessingUI();
                showMessage('Payment was cancelled.', 'info');
                return;
            }
            
            // 根据状态更新UI
            switch(data.status) {
                case 'completed':
                    clearInterval(window.paypalStatusCheckInterval);
                    window.paypalStatusCheckInterval = null;
                    window.paypalStatusCheckActive = false;
                    hidePayPalProcessingUI();
                    showPaymentSuccess(data.paymentId);
                    break;
                    
                case 'cancelled':
                    clearInterval(window.paypalStatusCheckInterval);
                    window.paypalStatusCheckInterval = null;
                    window.paypalStatusCheckActive = false;
                    hidePayPalProcessingUI();
                    showMessage('Payment was cancelled.', 'info');
                    break;
                    
                case 'failed':
                    clearInterval(window.paypalStatusCheckInterval);
                    window.paypalStatusCheckInterval = null;
                    window.paypalStatusCheckActive = false;
                    hidePayPalProcessingUI();
                    showError('Payment failed. Please try again.');
                    break;
                    
                case 'processing':
                    updateProcessingStatus('Payment is being processed...');
                    break;
                    
                default:
                    console.log('===DEBUG=== 未知支付状态:', data.status);
                    break;
            }
            
        } catch (error) {
            console.error('===DEBUG=== 检查支付状态时出错:', error);
            showError('Failed to check payment status');
            
            clearInterval(window.paypalStatusCheckInterval);
            window.paypalStatusCheckInterval = null;
            window.paypalStatusCheckActive = false;
            hidePayPalProcessingUI();
        }
    }, checkIntervalMs);
    
    // 返回interval ID以便外部代码管理
    return window.paypalStatusCheckInterval;
}

// 创建PayPal订单
async function createPayPalOrder() {
    const paymentIntentId = document.getElementById('payment-intent-id').value;
    console.log('===DEBUG=== createPayPalOrder开始，paymentIntentId:', paymentIntentId, new Date().toISOString());
    
    try {
        // 先获取商家信息，确认是否有有效的PayPal邮箱
        console.log('===DEBUG=== 开始获取商家PayPal信息');
        const merchantResponse = await fetch(`/api/payment/paypal/merchant-info/${paymentIntentId}`);
        if (!merchantResponse.ok) {
            console.error('===DEBUG=== 获取商家信息失败:', merchantResponse.status, merchantResponse.statusText);
            throw new Error(`获取商家信息失败: ${merchantResponse.status}`);
        }
        
        const merchantData = await merchantResponse.json();
        console.log('===DEBUG=== 商家信息响应:', JSON.stringify(merchantData));
        
        if (!merchantData.data || !merchantData.data.email) {
            console.error('===DEBUG=== 商家PayPal邮箱未设置');
            throw new Error('商家PayPal邮箱未设置，无法进行支付');
        }
        
        console.log('===DEBUG=== 获取到商家PayPal邮箱:', merchantData.data.email);
        
        // 显示处理中UI
        console.log('===DEBUG=== 显示处理中UI');
        showPayPalProcessingUI();
        
        // 创建PayPal订单
        console.log('===DEBUG=== 开始创建PayPal订单，请求参数:', JSON.stringify({paymentIntentId}));
        const response = await fetch(`/api/payment/paypal/create-order`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                paymentIntentId: paymentIntentId
            })
        });
        
        if (!response.ok) {
            console.error('===DEBUG=== 创建订单请求失败:', response.status, response.statusText);
            throw new Error(`创建订单失败: ${response.status}`);
        }
        
        console.log('===DEBUG=== 创建订单请求成功，解析响应');
        const orderData = await response.json();
        console.log('===DEBUG=== 订单响应数据:', JSON.stringify(orderData));
        
        if (orderData.success) {
            // 标记订单已创建
            console.log('===DEBUG=== 设置paypalOrderCreated=true');
            paypalOrderCreated = true;
            
            // 保存PayPal订单ID到本地存储
            localStorage.setItem(`paypal_order_${paymentIntentId}`, orderData.data.id);
            console.log('===DEBUG=== 已保存订单ID到localStorage:', orderData.data.id);
            
            // 对于redirects，我们需要监控新窗口
            if (orderData.data.approvalUrl) {
                try {
                    console.log('===DEBUG=== 检测到PayPal批准URL:', orderData.data.approvalUrl);
                    
                    // 记录跳转到PayPal的时间
                    const redirectTime = Date.now();
                    localStorage.setItem(`paypal_redirect_time_${paymentIntentId}`, redirectTime.toString());
                } catch (e) {
                    console.error('===DEBUG=== 设置PayPal批准URL失败:', e);
                }
            }
        } else {
            throw new Error('PayPal订单创建失败');
        }
    } catch (error) {
        console.error('===DEBUG=== 创建PayPal订单时出错:', error);
        hidePayPalProcessingUI();
        showError('Failed to create PayPal order');
    }
}

// 更新处理状态UI
function updateProcessingStatus(message) {
    const processingStatus = document.getElementById('processing-status');
    if (processingStatus) {
        processingStatus.textContent = message;
    }
}

// 显示处理中UI
function showPayPalProcessingUI() {
    // 隐藏原始按钮
    const paypalButtonContainer = document.getElementById('paypal-button-container');
    if (paypalButtonContainer) {
        paypalButtonContainer.style.display = 'none';
    }
    
    // 创建或显示处理UI
    let processingUI = document.getElementById('paypal-processing-ui');
    if (!processingUI) {
        processingUI = document.createElement('div');
        processingUI.id = 'paypal-processing-ui';
        processingUI.className = 'paypal-processing-overlay';
        processingUI.innerHTML = `
            <div class="paypal-processing-content">
                <div class="spinner"></div>
                <p id="processing-status">正在处理付款...</p>
                <button id="cancel-paypal-btn" class="btn btn-danger">取消支付</button>
            </div>
        `;
        document.body.appendChild(processingUI);
        
        // 添加取消按钮事件
        document.getElementById('cancel-paypal-btn').addEventListener('click', cancelPayPalPayment);
    } else {
        processingUI.style.display = 'flex';
    }
}

// 隐藏处理中UI并恢复按钮
function hidePayPalProcessingUI() {
    const processingUI = document.getElementById('paypal-processing-ui');
    if (processingUI) {
        processingUI.style.display = 'none';
    }
    
    // 恢复PayPal按钮
    const paypalButtonContainer = document.getElementById('paypal-button-container');
    if (paypalButtonContainer) {
        paypalButtonContainer.style.display = 'block';
        // 重新初始化PayPal按钮
        initPayPalButton();
    }
}

/**
 * 显示消息提示
 * @param {string} message 消息文本
 * @param {string} type 消息类型 ('info', 'error', 'success', 'warning')
 */
function showMessage(message, type = 'info') {
    console.log(`===DEBUG=== 显示消息: ${message}, 类型: ${type}`);
    
    // 移除之前的消息
    const previousMessage = document.getElementById('message-container');
    if (previousMessage) {
        previousMessage.remove();
    }
    
    // 创建新的消息元素
    const messageDiv = document.createElement('div');
    messageDiv.id = 'message-container';
    messageDiv.className = `message ${type}-message`;
    messageDiv.textContent = message;
    
    // 添加到页面
    const messageContainer = document.getElementById('message');
    if (messageContainer) {
        messageContainer.appendChild(messageDiv);
    } else {
        // 如果没有特定的消息容器，添加到body
        document.body.appendChild(messageDiv);
    }
    
    // 显示支付取消UI (如果是取消消息)
    if (message.toLowerCase().includes('cancel')) {
        const paymentCancelled = document.getElementById('payment-cancelled');
        if (paymentCancelled) {
            paymentCancelled.style.display = 'block';
        }
        
        // 隐藏其他支付相关UI
        const processingContainer = document.getElementById('paypal-processing-container');
        if (processingContainer) {
            processingContainer.style.display = 'none';
        }
        
        const paymentSuccess = document.getElementById('payment-success');
        if (paymentSuccess) {
            paymentSuccess.style.display = 'none';
        }
    }
    
    // 5秒后自动隐藏
    setTimeout(() => {
        messageDiv.style.opacity = '0';
        setTimeout(() => {
            if (messageDiv.parentNode) {
                messageDiv.parentNode.removeChild(messageDiv);
            }
        }, 500);
    }, 5000);
}

/**
 * 取消PayPal支付
 */
async function cancelPayPalPayment(isWindowClosing = false) {
    console.log('===DEBUG=== 开始取消PayPal支付', 'isWindowClosing=', isWindowClosing);
    
    // 设置取消标志，防止状态检查误判
    window.paymentCancelled = true;
    localStorage.setItem('paymentCancelledAt', Date.now().toString());
    
    // 获取支付意向ID和订单ID
    const paymentIntentId = document.getElementById('payment-intent-id')?.value 
                           || localStorage.getItem('paymentIntentId');
    const orderId = localStorage.getItem('paypalOrderId');
    
    if (!paymentIntentId) {
        console.error('===DEBUG=== 取消支付失败：找不到支付意向ID');
        return;
    }
    
    // 如果不是因为窗口关闭而取消，则显示处理中状态
    if (!isWindowClosing) {
        updateProcessingStatus('Cancelling payment...');
    }
    
    try {
        // 调用取消API
        const response = await fetch(`${API_BASE_URL}/payment/paypal/cancel-order`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                paymentIntentId,
                orderId
            })
        });
        
        if (!response.ok) {
            throw new Error('Failed to cancel payment');
        }
        
        const data = await response.json();
        console.log('===DEBUG=== 取消支付响应:', data);
        
        // 清除状态检查
        if (window.paypalStatusCheckInterval) {
            clearInterval(window.paypalStatusCheckInterval);
            window.paypalStatusCheckInterval = null;
        }
        
        // 隐藏处理中UI
        hidePayPalProcessingUI();
        
        // 显示取消消息
        if (!isWindowClosing) {
            showMessage('Payment cancelled successfully.', 'info');
            document.getElementById('cancelled-payment-id').textContent = paymentIntentId;
            document.getElementById('payment-cancelled').style.display = 'block';
        }
        
        // 重置状态
        localStorage.removeItem('paymentIntentId');
        localStorage.removeItem('paypalOrderId');
        localStorage.removeItem('paymentCancelledAt');
        window.paymentCancelled = false;
        
        // 延迟2秒后刷新支付详情
        setTimeout(() => {
            if (!isWindowClosing) {
                refreshPaymentDetails();
            }
        }, 2000);
        
    } catch (error) {
        console.error('===DEBUG=== 取消支付时出错:', error);
        
        // 即使出错也要重置状态
        localStorage.removeItem('paymentIntentId');
        localStorage.removeItem('paypalOrderId');
        localStorage.removeItem('paymentCancelledAt');
        window.paymentCancelled = false;
        
        if (!isWindowClosing) {
            hidePayPalProcessingUI();
            showError('Failed to cancel payment. Please try again.');
        }
    }
}

/**
 * 获取当前连接的钱包地址
 */
function getUserWalletAddress() {
    // 如果已经有获取钱包地址的方法，使用现有方法
    if (typeof contractService !== 'undefined' && contractService.getWalletAddress) {
        return contractService.getWalletAddress();
    }
    
    // 否则从UI中获取
    const walletAddressElement = document.getElementById('wallet-address');
    if (walletAddressElement && walletAddressElement.textContent) {
        const address = walletAddressElement.textContent.trim();
        // 检查是否看起来像一个有效的地址
        if (address.startsWith('0x') && address.length >= 10) {
            return address;
        }
    }
    
    return null;
}

/**
 * 检查是否有未完成的PayPal支付
 */
function checkPendingPayPalPayment(paymentId) {
    try {
        // 检查是否已取消
        const paymentCancelledAt = localStorage.getItem('paymentCancelledAt');
        if (paymentCancelledAt) {
            console.log('===DEBUG=== 检测到支付已被取消，不重启状态检查');
            return;
        }

        // 从localStorage中获取PayPal订单ID
        const paypalOrderId = localStorage.getItem('paypal_order_' + paymentId);
        
        // 如果有PayPal订单ID，表示之前的支付流程未完成
        if (paypalOrderId && paymentData && (paymentData.status === 'created' || paymentData.status === 'processing')) {
            console.log('===DEBUG=== 检测到未完成的PayPal支付，开始状态检查...');
            
            // 自动选择PayPal支付方式
            const paymentMethodSelect = document.getElementById('payment-method');
            if (paymentMethodSelect) {
                paymentMethodSelect.value = 'paypal';
                // 触发change事件以显示PayPal按钮
                paymentMethodSelect.dispatchEvent(new Event('change'));
            }
            
            // 开始检查支付状态
            startPayPalStatusCheck(paypalOrderId);
        }
    } catch (error) {
        console.error('===DEBUG=== 检查未完成PayPal支付错误:', error);
    }
}

/**
 * 检查钱包是否已连接
 */
function isWalletConnected() {
    // 如果有contractService.isConnected方法，使用它
    if (typeof contractService !== 'undefined' && typeof contractService.isConnected === 'function') {
        return contractService.isConnected();
    }
    
    // 否则检查UI元素
    const walletConnected = document.getElementById('wallet-connected');
    const walletAddress = document.getElementById('wallet-address');
    
    return walletConnected && 
           !walletConnected.classList.contains('hidden') && 
           walletAddress && 
           walletAddress.textContent && 
           walletAddress.textContent.trim().startsWith('0x');
}

async function createPaymentIntent(amount, platform, qrData) {
  try {
    // 解析二维码数据
    const qrInfo = parseQRCodeData(qrData);
    
    // 准备创建支付意图的数据
    const data = {
      amount: parseFloat(amount),
      platform: platform,
      description: `Payment to merchant ${qrInfo.merchantId || 'Unknown'}`,
      currency: 'USD'
    };

    // 如果是PayPal支付，添加商家PayPal邮箱
    if (platform === 'PayPal' && qrInfo.paypalEmail) {
      data.merchantPaypalEmail = qrInfo.paypalEmail;
    } else if (platform === 'PayPal') {
      throw new Error('PayPal支付需要商家的PayPal邮箱');
    }

    const response = await fetch('/api/payment-intents', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(data)
    });

    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.message || '创建支付意图失败');
    }

    const result = await response.json();
    return result.data;
  } catch (error) {
    console.error('创建支付意图时出错:', error);
    showError(error.message || '创建支付意图失败，请重试');
    throw error;
  }
}

// 解析二维码数据
function parseQRCodeData(qrData) {
  try {
    // 假设二维码数据是URL格式或JSON格式
    if (qrData.startsWith('http')) {
      // 解析URL参数
      const url = new URL(qrData);
      return {
        merchantId: url.searchParams.get('merchantId'),
        paypalEmail: url.searchParams.get('paypalEmail'),
        platform: url.searchParams.get('platform')
      };
    } else {
      // 尝试解析JSON
      return JSON.parse(qrData);
    }
  } catch (error) {
    console.error('解析二维码数据失败:', error);
    throw new Error('无效的二维码数据格式');
  }
}

function fetchMerchantInfo(paymentIntentId) {
  fetch(`/api/payment/paypal/merchant-info/${paymentIntentId}`)
    .then(response => {
      if (!response.ok) {
        throw new Error('Failed to fetch merchant info');
      }
      return response.json();
    })
    .then(data => {
      if (data.merchantPaypalEmail) {
        document.getElementById('merchant-paypal-email').textContent = data.merchantPaypalEmail;
        document.getElementById('merchant-paypal-email-container').classList.remove('d-none');
      }
    })
    .catch(error => {
      console.error('Error fetching merchant info:', error);
    });
}

function setupPaymentDetailsPage() {
  const urlParams = new URLSearchParams(window.location.search);
  const paymentIntentId = urlParams.get('id');
  
  if (paymentIntentId) {
    fetchPaymentDetails(paymentIntentId);
    fetchMerchantInfo(paymentIntentId);
  }
  // ... existing code ...
}